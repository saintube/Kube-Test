  
    # vars:
    #   app_ns: default
    #   app_label: "'statefulset.kubernetes.io/pod-name=cass-demo-dc1-rack1-0'"
    #   deploy_type: statefulset
    #   liveness_label: ""
    #   liveness_namespace: ""
    #   setup_script: ""
    #   check_script: ""
    #   cleanup_script: ""
  
    - block:

        ## Setup

        - block:

            - name: Setup
              shell: bash {{ setup_script }}

          when: setup_script != ''

        - block:

            - name: Checking status of liveness pod
              shell: kubectl get pod -n {{ liveness_namespace }} -l {{ liveness_label }} -o jsonpath='{.items[0].status.phase}'
              register: liveness_pod
              until: "'Running' in liveness_pod.stdout"
              delay: 10
              retries: 10
             
          when: liveness_label != ''  

        ## RECORD START-OF-TEST IN LITMUS RESULT CR

        - block:
 
            - name: Record test instance/run ID 
              set_fact: 
                run_id: "{{ lookup('env','RUN_ID') }}"
           
            - name: Construct testname appended with runID
              set_fact:
                test_name: "{{ test_name }}-{{ run_id }}"

          when: lookup('env','RUN_ID')

        - name: Generate the litmus result CR to reflect SOT (Start of Test) 
          template: 
            src: ../Kube-Test/hack/litmus-result.j2
            dest: litmus-result.yaml
          vars: 
            test: "{{ test_name }}"
            chaostype: ""
            app: ""
            phase: in-progress
            verdict: none

        - name: Apply the litmus result CR
          shell: kubectl apply -f litmus-result.yaml
          args:
            executable: /bin/bash
          register: lr_status 
          failed_when: "lr_status.rc != 0"

        ## DISPLAY APP INFORMATION 
 
        - name: Display the app information passed via the test job
          debug: 
            msg: 
              - "The application info is as follows:"
              - "Namespace    : {{ app_ns }}"
              - "Label        : {{ app_label }}"

        ## PRE-CHAOS APPLICATION LIVENESS CHECK
        - name: Verify that the AUT is running
          include_tasks: ../Kube-Test/utils/k8s/check_deployment_status.yml

        - block:
            - name: Get application pod name 
              shell: >
                kubectl get pods -n {{ app_ns }} -l {{ app_label }} --no-headers
                -o=custom-columns=NAME:".metadata.name" | shuf -n 1
              args:
                executable: /bin/bash
              register: app_pod_name
  
             ## APPLICATION FAULT INJECTION

            - include_tasks: ../Kube-Test/chaoslib/pumba/pod_failure_by_sigkill.yaml
              vars:
                action: "killapp"
                app_pod: "{{ app_pod_name.stdout }}"
                namespace: "{{ app_ns }}"
                label: "{{ app_label }}"

          when: deploy_type == 'deployment'

        - block:

            - name: Get application pod name
              shell: >
                kubectl get pod  -n {{ app_ns }} -l {{ app_label }} -o jsonpath='{.items[0].metadata.name}'
              args:
                executable: /bin/bash
              register: app_pod_name

            ## APPLICATION FAULT INJECTION

            - include_tasks: ../Kube-Test/chaoslib/pumba/pod_failure_by_sigkill.yaml
              vars:
                action: "killapp"
                app_pod: "{{ app_pod_name.stdout }}"
                namespace: "{{ app_ns }}"
                label: "{{ app_label }}"

          when: deploy_type == 'statefulset'

        ## Checkpoint execution

        - block:

            - name: Checkpoint
              shell: bash {{ check_script }}

          when: check_script != ''

        ## POST-CHAOS APPLICATION LIVENESS CHECK

        - name: Verify AUT liveness post fault-injection
          include_tasks: ../Kube-Test/utils/k8s/check_deployment_status.yml
  
        - block:

            - name: Checking status of liveness pod
              shell: kubectl get pod -n {{ liveness_namespace }} -l {{ liveness_label }} -o jsonpath='{.items[0].status.phase}'
              register: liveness_pod
              until: "'Running' in liveness_pod.stdout"
              delay: 10
              retries: 10
             
          when: liveness_label != ''  

        - set_fact:
            flag: "Pass"

      rescue: 
        - set_fact: 
            flag: "Fail"

      always: 

        ## RECORD END-OF-TEST IN LITMUS RESULT CR
 
        - name: Generate the litmus result CR to reflect EOT (End of Test) 
          template: 
            src: ../Kube-Test/hack/litmus-result.j2
            dest: litmus-result.yaml
          vars: 
            test: "{{ test_name }}"
            chaostype: ""
            app: ""
            phase: completed
            verdict: "{{ flag }}"
           
        - name: Apply the litmus result CR
          shell: kubectl apply -f litmus-result.yaml
          args:
            executable: /bin/bash
          register: lr_status 
          failed_when: "lr_status.rc != 0"
           
        - include_tasks: ../Kube-Test/chaoslib/pumba/pod_failure_by_sigkill.yaml 
          vars:
            action: "deletepumba"
            namespace: "{{ app_ns }}"

        ## Cleanup

        - block:

            - name: Cleanup
              shell: bash {{ cleanup_script }}

          when: cleanup_script != ''
